query GetVolumes($page: Int, $orderBy: DatasetOrderByInput, $where: DatasetWhereInput) {
  volumesConnection: datasetsConnection(
    page: $page
    orderBy: $orderBy
    where: $where
  ) {
    edges {
      cursor
      node {
        id
        name
        displayName
        description
        type
        uploadServerLink
      }
    }
    pageInfo {
      currentPage
      totalPage
    }
  }
}

query VolumeQuery($where: DatasetWhereUniqueInput!) {
  volume: dataset(where: $where) {
    id
    name
    displayName
    description
    type

    # Persistence Volume
    pvProvisioning
    volumeName
    volumeSize

    # Env
    variables

    # NFS
    nfsServer
    nfsPath

    # Hostpath
    hostPath

    # GitSync
    url
    secret {
      id
    }

    # Mountable Volumes
    mountRoot
    enableUploadServer
    uploadServerLink

    # Group Association
    global
    groups {
      id
      name
      displayName
      writable
    }
  }
}

mutation UpdateVolumeMutation($payload: DatasetUpdateInput!, $where: DatasetWhereUniqueInput!) {
  updateVolume: updateDataset(data: $payload, where: $where) {
    id
    uploadServerSecret {
      username
      password
    }
  }
}

mutation CreateVolumeMutation($payload: DatasetCreateInput!) {
  createVolume: createDataset(data: $payload) {
    id
  }
}

mutation DeleteVolumeMutation($where: DatasetWhereUniqueInput!) {
  deleteVolume: deleteDataset(where: $where) {
    id
  }
}


mutation RegenerateUploadServerSecretMutation ($where: DatasetWhereUniqueInput!) {
  regenerateUploadServerSecret(where: $where) {
    id
    uploadServerSecret {
      username
      password
    }
  }
}

query GetSecrets{
  secrets {
    id
    name
    displayName
    type
  }
}

query GetGroups($page: Int, $where: GroupWhereInput, $orderBy: GroupOrderByInput) {
  groups: groupsConnection(page: $page, where: $where, orderBy: $orderBy) {
    edges {
      cursor
      node {
        id
        name
        displayName
      }
    }
    pageInfo {
      currentPage
      totalPage
    }
  }
}
