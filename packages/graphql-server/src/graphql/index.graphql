# import System, SystemUpdateInput from "./system.graphql"
# import User, UsersOrderBy, UserMultiEmailResponse, UserConnection, UserWhereInput, UserWhereUniqueInput, UserCreateInput, UserUpdateInput, UserActionResponse from "./user.graphql"
# import  Group, GroupOrderByInput, GroupConnection, GroupWhereInput, GroupWhereUniqueInput, GroupCreateInput, GroupUpdateInput from "./group.graphql"
# import InstanceType, InstanceTypeOrderByInput, InstanceTypeConnection, InstanceTypeWhereInput, InstanceTypeWhereUniqueInput, InstanceTypeCreateInput, InstanceTypeUpdateInput from "./instanceType.graphql"
# import QueryImageMode, Image, ImageOrderByInput, ImageConnection, ImageWhereInput, ImageWhereUniqueInput, ImageCreateInput, ImageUpdateInput, GroupImageDeleteInput from "./image.graphql"
# import Announcement, AnnouncementConnection, AnnouncementWhereInput, AnnouncementWhereUniqueInput, AnnouncementCreateInput, AnnouncementUpdateInput from "./announcement.graphql"
# import Dataset, DatasetOrderByInput, DatasetMutationResponse, DatasetConnection, DatasetWhereInput, DatasetWhereUniqueInput, DatasetCreateInput, DatasetUpdateInput from "./dataset.graphql"
# import Secret, SecretOrderByInput, SecretConnection, SecretWhereInput, SecretWhereUniqueInput, SecretCreateInput, SecretUpdateInput from "./secret.graphql"

scalar JSON

type Query {
  """System"""
  system: System!

  """User"""
  me: User
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput
    before: String
    after: String
    first: Int
    last: Int
    userOrderBy: UsersOrderBy
  ): [User]!
  usersConnection(
    where: UserWhereInput
    before: String
    after: String
    first: Int
    last: Int
    userOrderBy: UsersOrderBy
  ): UserConnection!

  """Group"""
  group(where: GroupWhereUniqueInput!): Group
  groups(
    where: GroupWhereInput
    page: Int
    orderBy: GroupOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Group]!
  groupsConnection(
    where: GroupWhereInput
    page: Int
    orderBy: GroupOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): GroupConnection!

  """InstanceType"""
  instanceType(where: InstanceTypeWhereUniqueInput!): InstanceType
  instanceTypes(
    where: InstanceTypeWhereInput
    page: Int
    orderBy: InstanceTypeOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): [InstanceType]!
  instanceTypesConnection(
    where: InstanceTypeWhereInput
    page: Int
    orderBy: InstanceTypeOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): InstanceTypeConnection!

  """Image"""
  image(where: ImageWhereUniqueInput!): Image
  images(
    where: ImageWhereInput
    page: Int
    orderBy: ImageOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Image]!
  imagesConnection(
    mode: QueryImageMode
    where: ImageWhereInput
    page: Int
    orderBy: ImageOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): ImageConnection!

  """Announcement"""
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcements(
    where: AnnouncementWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Announcement]!
  announcementsConnection(
    where: AnnouncementWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): AnnouncementConnection!

  """Dataset"""
  dataset(where: DatasetWhereUniqueInput!): Dataset
  datasets(
    where: DatasetWhereInput
    page: Int
    orderBy: DatasetOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Dataset]!
  datasetsConnection(
    where: DatasetWhereInput
    page: Int
    orderBy: DatasetOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): DatasetConnection!

  """Secret"""
  secret(where: SecretWhereUniqueInput!): Secret!
  secrets(
    where: SecretWhereInput
    page: Int
    orderBy: SecretOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Secret]!
  secretsConnection(
    where: SecretWhereInput
    page: Int
    orderBy: SecretOrderByInput
    before: String
    after: String
    first: Int
    last: Int
  ): SecretConnection!
}

type Mutation {
  """System"""
  updateSystem(data: SystemUpdateInput!): System

  """User"""
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User

  """User mutation"""
  sendEmail(id: String, resetActions: [String], expiresIn: Int): UserActionResponse
  sendMultiEmail(in: [String], resetActions: [String], expiresIn: Int): UserMultiEmailResponse
  resetPassword(id: String, password: String, temporary: Boolean): UserActionResponse
  revokeApiToken: UserActionResponse

  """Group"""
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  deleteGroup(where: GroupWhereUniqueInput!): Group

  """InstanceType"""
  createInstanceType(data: InstanceTypeCreateInput!): InstanceType!
  updateInstanceType(data: InstanceTypeUpdateInput!, where: InstanceTypeWhereUniqueInput!): InstanceType
  deleteInstanceType(where: InstanceTypeWhereUniqueInput!): InstanceType

  """Secret"""
  createSecret(data: SecretCreateInput!): Secret!
  updateSecret(data: SecretUpdateInput!, where: SecretWhereUniqueInput!): Secret
  deleteSecret(where: SecretWhereUniqueInput!): Secret

  """Image"""
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deleteImage(where: ImageWhereUniqueInput!): Image

  """Group Image"""
  createGroupImage(data: ImageCreateInput!): Image!
  updateGroupImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deleteGroupImage(data: GroupImageDeleteInput!, where: ImageWhereUniqueInput!): Image


  """Announcement"""
  createAnnouncement(data: AnnouncementCreateInput!): Announcement!
  updateAnnouncement(data: AnnouncementUpdateInput!, where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncement(where: AnnouncementWhereUniqueInput): Announcement

  """Dataset"""
  createDataset(data: DatasetCreateInput!): DatasetMutationResponse!
  updateDataset(data: DatasetUpdateInput!, where: DatasetWhereUniqueInput!): DatasetMutationResponse!
  regenerateUploadServerSecret(where: DatasetWhereUniqueInput!): DatasetMutationResponse!
  deleteDataset(where: DatasetWhereUniqueInput!): Dataset

}
