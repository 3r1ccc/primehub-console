# import System, SystemUpdateInput from "./system.graphql"
# import User, UsersOrderBy, UserMultiEmailResponse, UserConnection, UserWhereInput, UserWhereUniqueInput, UserCreateInput, UserUpdateInput, UserActionResponse from "./user.graphql"
# import Group, GroupConnection, GroupWhereInput, GroupWhereUniqueInput, GroupCreateInput, GroupUpdateInput from "./group.graphql"
# import InstanceType, InstanceTypeConnection, InstanceTypeWhereInput, InstanceTypeWhereUniqueInput, InstanceTypeCreateInput, InstanceTypeUpdateInput from "./instanceType.graphql"
# import Image, ImageConnection, ImageWhereInput, ImageWhereUniqueInput, ImageCreateInput, ImageUpdateInput from "./image.graphql"
# import Announcement, AnnouncementConnection, AnnouncementWhereInput, AnnouncementWhereUniqueInput, AnnouncementCreateInput, AnnouncementUpdateInput from "./announcement.graphql"
# import Dataset, DatasetMutationResponse, DatasetConnection, DatasetWhereInput, DatasetWhereUniqueInput, DatasetCreateInput, DatasetUpdateInput from "./dataset.graphql"
# import Secret, SecretConnection, SecretWhereInput, SecretWhereUniqueInput, SecretCreateInput, SecretUpdateInput from "./secret.graphql"
# import Workspace, WorkspaceEdge, WorkspaceConnection, WorkspaceWhereInput, WorkspaceWhereUniqueInput, WorkspaceCreateInput, WorkspaceUpdateInput from "./workspace.graphql"
# import BuildImageJob, BuildImageJobConnection, BuildImageJobWhereInput, BuildImageJobWhereUniqueInput, BuildImage, BuildImageConnection, BuildImageWhereUniqueInput, BuildImageWhereInput, BuildImageCreateInput, BuildImageUpdateInput from "./buildImage.graphql" 
# import PhJob, PhJobConnection, PhJobWhereUniqueInput, PhJobWhereInput from "./phJob.graphql"

scalar JSON

type Query {
  """System"""
  system: System!

  """User"""
  me: User
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput
    before: String
    after: String
    first: Int
    last: Int
    userOrderBy: UsersOrderBy
  ): [User]!
  usersConnection(
    where: UserWhereInput
    before: String
    after: String
    first: Int
    last: Int
    userOrderBy: UsersOrderBy
  ): UserConnection!

  """Group"""
  group(where: GroupWhereUniqueInput!): Group
  groups(
    where: GroupWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Group]!
  groupsConnection(
    where: GroupWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): GroupConnection!

  """InstanceType"""
  instanceType(where: InstanceTypeWhereUniqueInput!): InstanceType
  instanceTypes(
    where: InstanceTypeWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [InstanceType]!
  instanceTypesConnection(
    where: InstanceTypeWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): InstanceTypeConnection!

  """Image"""
  image(where: ImageWhereUniqueInput!): Image
  images(
    where: ImageWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Image]!
  imagesConnection(
    where: ImageWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): ImageConnection!

  """Announcement"""
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcements(
    where: AnnouncementWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Announcement]!
  announcementsConnection(
    where: AnnouncementWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): AnnouncementConnection!

  """Dataset"""
  dataset(where: DatasetWhereUniqueInput!): Dataset
  datasets(
    where: DatasetWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Dataset]!
  datasetsConnection(
    where: DatasetWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): DatasetConnection!

  """Secret"""
  secret(where: SecretWhereUniqueInput!): Secret!
  secrets(
    where: SecretWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [Secret]!
  secretsConnection(
    where: SecretWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): SecretConnection!

  """workspace"""
  workspace(where: WorkspaceWhereUniqueInput!): Workspace!
  workspaces(
    before: String
    after: String
    first: Int
    last: Int
  ): [Workspace]!
  workspacesConnection(
    where: WorkspaceWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): WorkspaceConnection!

  """BuildImage"""
  buildImage(where: BuildImageWhereUniqueInput!): BuildImage!
  buildImages(
    where: BuildImageWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [BuildImage]!
  buildImagesConnection(
    where: BuildImageWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): BuildImageConnection!

  """BuildImageJob"""
  buildImageJob(where: BuildImageJobWhereUniqueInput!): BuildImageJob!
  buildImageJobs(
    where: BuildImageJobWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [BuildImageJob]!
  buildImageJobsConnection(
    where: BuildImageJobWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): BuildImageJobConnection!

  """PhJob"""
  phJob(where: PhJobWhereUniqueInput!): PhJob!
  phJobs(
    where: PhJobWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): [PhJob]!
  phJobsConnection(
    where: PhJobWhereInput
    before: String
    after: String
    first: Int
    last: Int
  ): PhJobConnection!
}

type Mutation {
  """System"""
  updateSystem(data: SystemUpdateInput!): System

  """User"""
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User

  """User mutation"""
  sendEmail(id: String, resetActions: [String], expiresIn: Int): UserActionResponse
  sendMultiEmail(in: [String], resetActions: [String], expiresIn: Int): UserMultiEmailResponse
  resetPassword(id: String, password: String, temporary: Boolean): UserActionResponse

  """Group"""
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  deleteGroup(where: GroupWhereUniqueInput!): Group

  """InstanceType"""
  createInstanceType(data: InstanceTypeCreateInput!): InstanceType!
  updateInstanceType(data: InstanceTypeUpdateInput!, where: InstanceTypeWhereUniqueInput!): InstanceType
  deleteInstanceType(where: InstanceTypeWhereUniqueInput!): InstanceType

  """Secret"""
  createSecret(data: SecretCreateInput!): Secret!
  updateSecret(data: SecretUpdateInput!, where: SecretWhereUniqueInput!): Secret
  deleteSecret(where: SecretWhereUniqueInput!): Secret

  """Image"""
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deleteImage(where: ImageWhereUniqueInput!): Image

  """Announcement"""
  createAnnouncement(data: AnnouncementCreateInput!): Announcement!
  updateAnnouncement(data: AnnouncementUpdateInput!, where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncement(where: AnnouncementWhereUniqueInput): Announcement

  """Dataset"""
  createDataset(data: DatasetCreateInput!): DatasetMutationResponse!
  updateDataset(data: DatasetUpdateInput!, where: DatasetWhereUniqueInput!): DatasetMutationResponse!
  regenerateUploadServerSecret(where: DatasetWhereUniqueInput!): DatasetMutationResponse!
  deleteDataset(where: DatasetWhereUniqueInput!): Dataset

  """Workspace"""
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace

  """BuildImage"""
  createBuildImage(data: BuildImageCreateInput!): BuildImage!
  updateBuildImage(data: BuildImageUpdateInput!, where: BuildImageWhereUniqueInput!): BuildImage
  deleteBuildImage(where: BuildImageWhereUniqueInput!): BuildImage
}
